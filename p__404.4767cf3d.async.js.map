{"version":3,"sources":["webpack:///./src/pages/404/index.tsx","webpack:///./src/utils/constant.ts"],"names":["memo","handleClick","useCallback","history","RouteLink","type","onClick","CONVERT_TYPE_MAP","string","value","number","Number","boolean","toLowerCase","null","undefined","bigInt","BigInt","symbol","Symbol","object","JSON","parse","error","log","message","array","function","eval","currentWorkingDir","process","cwd","ENV_KEY","Dotenv","path","getEnvValue","envKey","options","returnType","converter","Error","enValue","includes","toString","split","RouteName","LOCAL_STORAGE_NAME","EVENT_NAME","SCROLL_SPEED","ARTICLE_COMMIT_LAST_DATE","ARTICLE_SUFFIX_NAME","ARTICLE_DIR","ARTICLE_PICtURE","WRITE_ARTICLE_DIR"],"mappings":"qPAMA,cAAeA,WAAK,WAChB,IAAMC,GAAcC,kBAAY,KAC5BC,SAAA,WAAiBC,YAAjB,GACD,IAEH,OACI,iCAEI,gBAAC,KAAD,CAAQC,KAAK,UAAUC,QAASL,GAAhC,aAKX,G,yuBCbYM,iBAGT,CACAC,OAASC,GAAUA,EACnBC,OAASD,GAAUE,OAAOF,GAC1BG,QAAUH,GAAkC,SAAxBA,EAAMI,cAC1BC,KAAM,IAAM,KACZC,UAAW,SAAF,mGAAE,OAAF,IACTC,OAASP,GAAUQ,OAAOR,GAC1BS,OAAST,GAAUU,OAAOV,GAC1BW,OAASX,IACL,IACI,OAAOY,KAAKC,MAAMb,EAWrB,CAVC,MAAOc,GASL,OARAC,mDAAU,0BAAiB,CACvB,CAAEnB,KAAM,QAASoB,QAASF,GAC1B,CACIE,QAAS,yCAAF,OACO,KAAVhB,EAAe,2BAASA,MAI7B,IACV,GAELiB,MAAQjB,IACJ,IACI,OAAOY,KAAKC,MAAMb,EAYrB,CAXC,MAAOc,GAUL,OATAC,mDAAU,0BAAiB,CACvB,CAAEnB,KAAM,QAASoB,QAASF,GAC1B,CACIE,QAAS,yCAAF,OACO,KAAVhB,EAAe,2BAASA,MAK7B,EACV,GAELkB,SAAWlB,OAAUmB,KAAK,IAAD,OAAKnB,MAAL,OASvBoB,kBAAoBC,QAAQC,MAM7BC,QAJLC,qDAAc,CAAEC,KAAMA,uCAAUL,kBAAmB,U,SAI9CG,K,+BAAAA,E,6BAAAA,E,yCAAAA,E,qCAAAA,E,6CAAAA,E,wDAAAA,kB,KASL,IAAMG,YAAc,CAChBC,EACAC,KAGqC,QACrC,QAAetB,IAAXqB,GAAmC,OAAXA,EACxB,OAAO,KAGX,aAAkCC,QAAlC,IAAkCA,IAAW,CAAC,EAA9C,IAAQC,kBAAR,MAAqB,SAArB,EAEMC,EAAYhC,iBAAiB+B,GAEnC,IAAKC,EACD,MAAM,IAAIC,MAAM,kCAGpB,IAAMC,EAAO,UAAGX,gqWAAYM,UAAf,QAA0B,GAEvC,MAAmB,UAAfE,GAA0BG,EAAQC,SAAS,KACpCD,EAAQE,WAAWC,MAAM,KAM7BL,EAAS,UAACT,gqWAAYM,UAAb,QAAwB,GAAxC,EAQQS,UAOAzC,UAOA0C,mBASAC,Y,SAvBAF,K,wBAAAA,E,uBAAAA,E,uBAAAA,E,0BAAAA,sB,cAOAzC,K,iBAAAA,E,eAAAA,E,eAAAA,E,kBAAAA,sB,cAOA0C,K,6CAAAA,E,wDAAAA,E,2BAAAA,E,iDAAAA,E,gDAAAA,wC,cASAC,K,4DAAAA,E,qCAAAA,E,wCAAAA,wB,KASL,IAAMC,aAAeb,YAAsBH,QAAQgB,aAAc,CACpEV,WAAY,WAKHW,yBAA2Bd,YACpCH,QAAQiB,0BAGCC,oBAAsBf,YAC/BH,QAAQkB,oBACR,CAAEZ,WAAY,UAOLa,YAAchB,YAAsBH,QAAQmB,aAE5CC,gBAAkBjB,YAAsBH,QAAQoB,iBAEhDC,kBAAoBlB,YAC7BH,QAAQqB,kB","file":"p__404.4767cf3d.async.js","sourcesContent":["import { memo, useCallback } from 'react'\nimport { history } from 'umi'\nimport { Button } from 'antd'\n\nimport { RouteLink } from '@/utils/constant'\n\nexport default memo(function NotFound() {\n    const handleClick = useCallback(() => {\n        history.push(`/${RouteLink.Index}`)\n    }, [])\n\n    return (\n        <div>\n            404\n            <Button type='primary' onClick={handleClick}>\n                Back Home\n            </Button>\n        </div>\n    )\n})\n","import path from 'path'\nimport Dotenv from 'dotenv'\nimport log from '@yomua/y-tlog'\n\nimport { EnvValueType, JSValueType } from './utils.d'\n\nexport const CONVERT_TYPE_MAP: Record<\n    JSValueType,\n    (value: string) => EnvValueType<JSValueType>\n> = {\n    string: (value) => value,\n    number: (value) => Number(value),\n    boolean: (value) => value.toLowerCase() === 'true',\n    null: () => null,\n    undefined: () => undefined,\n    bigInt: (value) => BigInt(value),\n    symbol: (value) => Symbol(value),\n    object: (value) => {\n        try {\n            return JSON.parse(value)\n        } catch (error: any) {\n            log.group('JSON.parse 失败', [\n                { type: 'error', message: error },\n                {\n                    message: `要解析的值为: ${\n                        value === '' ? '空字符串' : value\n                    }`,\n                },\n            ])\n            return null\n        }\n    },\n    array: (value) => {\n        try {\n            return JSON.parse(value)\n        } catch (error: any) {\n            log.group('JSON.parse 失败', [\n                { type: 'error', message: error },\n                {\n                    message: `要解析的值为: ${\n                        value === '' ? '空字符串' : value\n                    }`,\n                },\n            ])\n\n            return []\n        }\n    },\n    function: (value) => eval(`(${value})`),\n}\n\n// 这里的目的是因为: constants 存在打包之前就需要的 process.env 中的变量\n// 所以需要在这里提前注入环境变量(否则是获取不到打包之前就需要的 process.env 的变量的)\n// 即: umi 在进行打包 (使用 webpack) 时, 我们再这之前会执行 scripts/index.ts, 进行一些操作,\n// => 而这些操作需要使用到环境变量, 在这里通过 dotenv 提前将 .env 注入到环境变量, 并读取然后赋值给常量\n// => 从而在打包之前就可以使用这些值.\n// - Ref: /** 以下变量用于打包之前的准备 */\nconst currentWorkingDir = process.cwd()\n// 将指定文件的内容写入到环境变量中 (process.env)\nDotenv.config({ path: path.join(currentWorkingDir, '.env') })\n\n/** 以下不需要导出，用在此文件 */\n\nenum ENV_KEY {\n    SCROLL_SPEED = 'SCROLL_SPEED',\n    ARTICLE_DIR = 'ARTICLE_DIR',\n    WRITE_ARTICLE_DIR = 'WRITE_ARTICLE_DIR',\n    ARTICLE_PICtURE = 'ARTICLE_PICtURE',\n    ARTICLE_SUFFIX_NAME = 'ARTICLE_SUFFIX_NAME',\n    ARTICLE_COMMIT_LAST_DATE = 'ARTICLE_COMMIT_LAST_DATE',\n}\n\nconst getEnvValue = <ReturnType extends JSValueType, DataType = ReturnType>(\n    envKey: ENV_KEY,\n    options?: {\n        returnType?: ReturnType\n    },\n): EnvValueType<ReturnType, DataType> => {\n    if (envKey === undefined || envKey === null) {\n        return null as EnvValueType<ReturnType, DataType>\n    }\n\n    const { returnType = 'string' } = options ?? {}\n\n    const converter = CONVERT_TYPE_MAP[returnType]\n\n    if (!converter) {\n        throw new Error('类型不存在')\n    }\n\n    const enValue = process.env[envKey] ?? ''\n\n    if (returnType === 'array' && enValue.includes(',')) {\n        return enValue.toString().split(',') as EnvValueType<\n            ReturnType,\n            DataType\n        >\n    }\n\n    return converter(process.env[envKey] ?? '') as EnvValueType<\n        ReturnType,\n        DataType\n    >\n}\n\n/** 以上不需要导出，用在此文件 */\n\nexport enum RouteName {\n    Index = '首页',\n    Type = '分类',\n    Mood = '心情',\n    About = '关于',\n}\n\nexport enum RouteLink {\n    Index = 'index',\n    Type = 'type',\n    Mood = 'mood',\n    About = 'about',\n}\n\nexport enum LOCAL_STORAGE_NAME {\n    SELECTED_ARTICLE_KEY = 'selectedArticleKey',\n    ARTICLE_TREE_EXPANDED_KEYS = 'articleTreeExpandedKeys',\n    DATA_THEME = 'data-theme',\n    GPT3_CHAT_INFORMATION = 'gpt3_chat_information',\n    SEARCH_HISTORY_RESULT = 'searchHistoryResult',\n}\n\n// 所有自定义事件名\nexport enum EVENT_NAME {\n    // 只有当视区内只显示文章时，此事件才会被监听和触发。\n    OPEN_ARTICLE_DIRECTORY = 'openArticleDirectoryOnlyArticle',\n    HEADER_MENU_ICON = 'headerMenuIcon',\n    SHOW_SEARCH_PANEL = 'showSearchPanel',\n}\n\n/************************* 以下都是 .env 中的变量值 *************************/\n\nexport const SCROLL_SPEED = getEnvValue<'number'>(ENV_KEY.SCROLL_SPEED, {\n    returnType: 'number',\n})\n\n/** 以下变量即用于打包之前, 也用于打包后的运行时 */\n\nexport const ARTICLE_COMMIT_LAST_DATE = getEnvValue<'string'>(\n    ENV_KEY.ARTICLE_COMMIT_LAST_DATE,\n)\n\nexport const ARTICLE_SUFFIX_NAME = getEnvValue<'array', string>(\n    ENV_KEY.ARTICLE_SUFFIX_NAME,\n    { returnType: 'array' },\n)\n\n/** 以上变量即用于打包之前, 也用于打包后的运行时 */\n\n/** 以下变量用于打包之前的准备 */\n\nexport const ARTICLE_DIR = getEnvValue<'string'>(ENV_KEY.ARTICLE_DIR)\n\nexport const ARTICLE_PICtURE = getEnvValue<'string'>(ENV_KEY.ARTICLE_PICtURE)\n\nexport const WRITE_ARTICLE_DIR = getEnvValue<'string'>(\n    ENV_KEY.WRITE_ARTICLE_DIR,\n)\n\n/** 以上变量用于打包之前的准备 */\n\n/************************* 以上都是 .env 中的变量值 *************************/\n"],"sourceRoot":""}