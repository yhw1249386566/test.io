{"version":3,"sources":["webpack:///./node_modules/refractor/lang/javadoclike.js"],"names":["javadoclike","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","docCommentSupport","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","addSupport","docLanguage","forEach","inside","rest","Object","defineProperty","value","module","exports","displayName","aliases"],"mappings":"2FAKA,SAASA,EAAYC,IAClB,SAAWA,GACV,IAAIC,EAAeD,EAAME,UAAUH,YAAc,CAC/CI,UAAW,CACTC,QACE,iEACFC,YAAY,GAEdC,QAAS,CAGPF,QAAS,wDACTC,YAAY,GAEdE,YAAa,QAQf,SAASC,EAAkBC,EAAMC,GAC/B,IAAIC,EAAY,cACZC,EAAUZ,EAAME,UAAUO,GAC9B,GAAKG,EAAL,CAGA,IAAIC,EAAQD,EAAQD,GACpB,IAAKE,EAAO,CAEV,IAAIC,EAAa,CAAC,EAClBA,EAAWH,GAAa,CACtBP,QAAS,wCACTC,YAAY,EACZU,MAAO,WAETH,EAAUZ,EAAME,UAAUc,aAAaP,EAAM,UAAWK,GACxDD,EAAQD,EAAQD,EAClB,CAOA,GANIE,aAAiBI,SAEnBJ,EAAQD,EAAQD,GAAa,CAC3BP,QAASS,IAGTK,MAAMC,QAAQN,GAChB,IAAK,IAAIO,EAAI,EAAGC,EAAIR,EAAMS,OAAQF,EAAIC,EAAGD,IACnCP,EAAMO,aAAcH,SACtBJ,EAAMO,GAAK,CACThB,QAASS,EAAMO,KAGnBV,EAASG,EAAMO,SAGjBV,EAASG,EA7BX,CA+BF,CAOA,SAASU,EAAWrB,EAAWsB,GACJ,kBAAdtB,IACTA,EAAY,CAACA,IAEfA,EAAUuB,SAAQ,SAAUhB,GAC1BD,EAAkBC,GAAM,SAAUL,GAC3BA,EAAQsB,SACXtB,EAAQsB,OAAS,CAAC,GAEpBtB,EAAQsB,OAAOC,KAAOH,CACxB,GACF,GACF,CACAI,OAAOC,eAAe5B,EAAa,aAAc,CAC/C6B,MAAOP,IAETtB,EAAYsB,WAAW,CAAC,OAAQ,aAAc,OAAQtB,EACvD,EAjFA,CAiFED,EACL,CAtFA+B,EAAOC,QAAUjC,EACjBA,EAAYkC,YAAc,cAC1BlC,EAAYmC,QAAU,E","file":"react-syntax-highlighter_languages_refractor_javadoclike.6c4674eb.async.js","sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"sourceRoot":""}