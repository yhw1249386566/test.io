{"version":3,"sources":["webpack:///./node_modules/refractor/lang/java.js","webpack:///./node_modules/refractor/lang/javadoc.js","webpack:///./node_modules/refractor/lang/javadoclike.js"],"names":["java","Prism","keywords","classNamePrefix","source","className","pattern","RegExp","lookbehind","inside","namespace","punctuation","languages","extend","string","greedy","keyword","function","clike","number","operator","insertBefore","alias","char","annotation","generics","replace","module","exports","displayName","aliases","refractorJava","refractorJavadoclike","javadoc","register","codeLinePattern","memberReference","reference","field","code","line","tag","markup","entity","javadoclike","addSupport","javaDocLike","parameter","docCommentSupport","lang","callback","tokenName","grammar","token","definition","Array","isArray","i","l","length","docLanguage","forEach","rest","Object","defineProperty","value"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_javadoc.110e490e.async.js","sourcesContent":["'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(::\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern:\n          /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJava = require('./java.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJava)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source\n    var reference =\n      /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(\n        /<mem>/g,\n        function () {\n          return memberReference\n        }\n      )\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(\n          /(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)/\n            .source +\n            '(?:' +\n            reference +\n            ')'\n        ),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [\n        {\n          pattern:\n            /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n          lookbehind: true,\n          inside: {\n            code: {\n              // there can't be any HTML inside of {@code} tags\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: Prism.languages.java,\n              alias: 'language-java'\n            }\n          }\n        },\n        {\n          pattern:\n            /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: {\n            line: {\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: {\n                // highlight HTML tags and entities\n                tag: Prism.languages.markup.tag,\n                entity: Prism.languages.markup.entity,\n                code: {\n                  // everything else is Java code\n                  pattern: /.+/,\n                  inside: Prism.languages.java,\n                  alias: 'language-java'\n                }\n              }\n            }\n          }\n        }\n      ],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"sourceRoot":""}