{"version":3,"sources":["webpack:///./node_modules/refractor/lang/shell-session.js"],"names":["refractorBash","shellSession","Prism","register","strings","source","join","languages","command","pattern","RegExp","replace","greedy","inside","info","alias","user","punctuation","path","bash","lookbehind","output","module","exports","displayName","aliases"],"mappings":"iGACA,IAAIA,EAAgB,EAAQ,MAI5B,SAASC,EAAaC,GACpBA,EAAMC,SAASH,GACd,SAAWE,GAGV,IAAIE,EAAU,CAEZ,wDAAwDC,OACxD,UAAUA,OACV,2BAA2BA,OAE3B,0CAA0CA,QAC1CC,KAAK,KACPJ,EAAMK,UAAU,iBAAmB,CACjCC,QAAS,CACPC,QAASC,OAEP,IAAIL,OACF,MACC,kEACEA,OACD,IAGA,+BAA+BA,OACjC,KACA,cAAcA,OACd,qFAAqFA,OAAOM,QAC1F,YACA,WACE,OAAOP,CACT,IAEJ,KAEFQ,QAAQ,EACRC,OAAQ,CACNC,KAAM,CAIJL,QAAS,WACTM,MAAO,cACPF,OAAQ,CACNG,KAAM,uCACNC,YAAa,IACbC,KAAM,YAGVC,KAAM,CACJV,QAAS,uBACTW,YAAY,EACZL,MAAO,gBACPF,OAAQX,EAAMK,UAAUY,MAE1B,eAAgB,CACdV,QAAS,SACTM,MAAO,eAIbM,OAAQ,yBAEVnB,EAAMK,UAAU,cAAgBL,EAAMK,UAAU,gBAC9CL,EAAMK,UAAU,gBACnB,CA/DA,CA+DEL,EACL,CArEAoB,EAAOC,QAAUtB,EACjBA,EAAauB,YAAc,eAC3BvB,EAAawB,QAAU,E","file":"react-syntax-highlighter_languages_refractor_shellSession.afbfddbb.async.js","sourcesContent":["'use strict'\nvar refractorBash = require('./bash.js')\nmodule.exports = shellSession\nshellSession.displayName = 'shellSession'\nshellSession.aliases = []\nfunction shellSession(Prism) {\n  Prism.register(refractorBash)\n  ;(function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [\n      // normal string\n      /\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/.source,\n      /'[^']*'/.source,\n      /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/.source, // here doc\n      // 2 capturing groups\n      /<<-?\\s*([\"']?)(\\w+)\\1\\s[\\s\\S]*?[\\r\\n]\\2/.source\n    ].join('|')\n    Prism.languages['shell-session'] = {\n      command: {\n        pattern: RegExp(\n          // user info\n          /^/.source +\n            '(?:' + // <user> \":\" ( <path> )?\n            (/[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+(?::[^\\0-\\x1F$#%*?\"<>:;|]+)?/\n              .source +\n              '|' + // <path>\n              // Since the path pattern is quite general, we will require it to start with a special character to\n              // prevent false positives.\n              /[/~.][^\\0-\\x1F$#%*?\"<>@:;|]*/.source) +\n            ')?' + // shell symbol\n            /[$#%](?=\\s)/.source + // bash command\n            /(?:[^\\\\\\r\\n \\t'\"<$]|[ \\t](?:(?!#)|#.*$)|\\\\(?:[^\\r]|\\r\\n?)|\\$(?!')|<(?!<)|<<str>>)+/.source.replace(\n              /<<str>>/g,\n              function () {\n                return strings\n              }\n            ),\n          'm'\n        ),\n        greedy: true,\n        inside: {\n          info: {\n            // foo@bar:~/files$ exit\n            // foo@bar$ exit\n            // ~/files$ exit\n            pattern: /^[^#$%]+/,\n            alias: 'punctuation',\n            inside: {\n              user: /^[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+/,\n              punctuation: /:/,\n              path: /[\\s\\S]+/\n            }\n          },\n          bash: {\n            pattern: /(^[$#%]\\s*)\\S[\\s\\S]*/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#%]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    }\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] =\n      Prism.languages['shell-session']\n  })(Prism)\n}\n"],"sourceRoot":""}