{"version":3,"sources":["webpack:///./node_modules/refractor/lang/javadoclike.js","webpack:///./node_modules/refractor/lang/jsdoc.js","webpack:///./node_modules/refractor/lang/typescript.js"],"names":["javadoclike","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","docCommentSupport","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","addSupport","docLanguage","forEach","inside","rest","Object","defineProperty","value","module","exports","displayName","aliases","refractorJavadoclike","refractorTypescript","jsdoc","register","javascript","type","source","parameterPrefix","extend","code","replace","string","number","boolean","typescript","operator","example","greedy","builtin","push","typeInside","decorator","at","function","generic","ts"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_jsdoc.1e6c76dc.async.js","sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source\n    var parameterPrefix =\n      '(@(?:arg|argument|param|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(\n          parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix +\n            /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(\n              /<TYPE>/g,\n              function () {\n                return type\n              }\n            )\n          ),\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            string: javascript.string,\n            number: javascript.number,\n            boolean: javascript.boolean,\n            keyword: Prism.languages.typescript.keyword,\n            operator: /=>|\\.\\.\\.|[&|?:*]/,\n            punctuation: /[.,;=<>{}()[\\]]/\n          }\n        }\n      ],\n      example: {\n        pattern:\n          /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n"],"sourceRoot":""}