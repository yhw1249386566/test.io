{"version":3,"sources":["webpack:///./src/pages/404/index.tsx","webpack:///./src/utils/constant.ts","webpack:///./src/utils/log.ts"],"names":["memo","history","useHistory","handleClick","useCallback","push","RouteLink","type","onClick","CONVERT_TYPE_MAP","string","value","number","Number","boolean","toLowerCase","null","undefined","bigInt","BigInt","symbol","Symbol","object","JSON","parse","error","log","sub","message","array","function","eval","currentWorkingDir","process","cwd","ENV_KEY","Dotenv","path","getEnvValue","envKey","options","returnType","converter","Error","RouteName","LOCAL_STORAGE_NAME","EVENT_EMITTER_NAME","SCROLL_SPEED","ARTICLE_SUFFIX_NAME","ARTICLE_DIR","ARTICLE_PICtURE","WRITE_ARTICLE_DIR","LOG_COLOR_MAP","info","logo","trace","logoGroup","title","console","group","forEach","item","groupEnd"],"mappings":"kKAMA,cAAeA,WAAK,WAChB,IAAMC,GAAUC,UAEVC,GAAcC,kBAAY,KAC5BH,EAAQI,KAAR,WAAiBC,YAAjB,GACD,IAEH,OACI,kCAEI,eAAQC,KAAK,UAAUC,QAASL,EAAhC,yBAKX,G,wrBCfYM,iBAGT,CACAC,OAASC,GAAUA,EACnBC,OAASD,GAAUE,OAAOF,GAC1BG,QAAUH,GAAkC,SAAxBA,EAAMI,cAC1BC,KAAM,IAAM,KACZC,UAAW,SAAF,mGAAE,OAAF,IACTC,OAASP,GAAUQ,OAAOR,GAC1BS,OAAST,GAAUU,OAAOV,GAC1BW,OAASX,IACL,IACI,OAAOY,KAAKC,MAAMb,EAcrB,CAbC,MAAOc,GAYL,OAXAC,0CAAU,0BAAiB,CACvBC,IAAK,CACD,CAAEpB,KAAM,QAASqB,QAASH,GAC1B,CACIlB,KAAM,MACNqB,QAAS,yCAAF,OACO,KAAVjB,EAAe,2BAASA,OAKjC,IACV,GAELkB,MAAQlB,IACJ,IACI,OAAOY,KAAKC,MAAMb,EAerB,CAdC,MAAOc,GAaL,OAZAC,0CAAU,0BAAiB,CACvBC,IAAK,CACD,CAAEpB,KAAM,QAASqB,QAASH,GAC1B,CACIlB,KAAM,MACNqB,QAAS,yCAAF,OACO,KAAVjB,EAAe,2BAASA,OAMjC,IACV,GAELmB,SAAWnB,OAAUoB,KAAK,IAAD,OAAKpB,MAAL,OAKvBqB,kBAAoBC,QAAQC,MAK7BC,QAJLC,qDAAc,CAAEC,KAAMA,uCAAUL,kBAAmB,U,SAI9CG,K,+BAAAA,E,6BAAAA,E,yCAAAA,E,qCAAAA,E,8CAAAA,kB,KAQL,IAAMG,YAAc,CAChBC,EACAC,KAG2B,MAC3B,QAAevB,IAAXsB,GAAmC,OAAXA,EACxB,OAAO,KAGX,aAAkCC,QAAlC,IAAkCA,IAAW,CAAC,EAA9C,IAAQC,kBAAR,MAAqB,SAArB,EAEMC,EAAYjC,iBAAiBgC,GAEnC,IAAKC,EACD,MAAM,IAAIC,MAAM,kCAGpB,OAAOD,EAAS,UAACT,i6VAAYM,UAAb,QAAwB,GAAxC,EAKQK,UAOAtC,UAOAuC,mBASAC,oB,SAvBAF,K,wBAAAA,E,uBAAAA,E,uBAAAA,E,0BAAAA,sB,cAOAtC,K,iBAAAA,E,eAAAA,E,eAAAA,E,kBAAAA,sB,cAOAuC,K,6CAAAA,E,sCAAAA,E,wDAAAA,E,2BAAAA,E,kDAAAA,wC,cASAC,K,4DAAAA,E,gCAAAA,wC,KAQL,IAAMC,aAAeT,YAAYH,QAAQY,aAAc,CAC1DN,WAAY,WAKHO,oBAAsBV,YAAYH,QAAQa,qBAM1CC,YAAcX,YAAYH,QAAQc,aAElCC,gBAAkBZ,YAAYH,QAAQe,iBAEtCC,kBAAoBb,YAAYH,QAAQgB,kB,kDC9I/CC,EAAgB,CAClB3B,MAAO,sCACP4B,KAAM,sCACNC,KAAM,sCACNC,MAAO,uCAGLC,EAAY,CACdC,EACAjB,KAOA,aAAqBA,QAArB,IAAqBA,IAAW,CAAC,EAAjC,IAAQb,WAAR,MAAc,GAAd,EAEA+B,QAAQC,MAAR,YAAmBF,GAAS,uCAE5B9B,EAAIiC,SAASC,IACT,IAAQtD,EAAkBsD,EAAlBtD,KAAMqB,EAAYiC,EAAZjC,QAEd8B,QAAQnD,GAAR,YAAmBqB,GAAWwB,EAAc7C,GAA5C,IAGJmD,QAAQI,UAAR,EAGJ,QAAe,kBACRJ,SADP,IAEIC,MAAOH,G","file":"p__404.210ea2bf.async.js","sourcesContent":["import { memo, useCallback } from 'react'\nimport { useHistory } from 'umi'\nimport { Button } from 'antd'\n\nimport { RouteLink } from '@/utils/constant'\n\nexport default memo(function NotFound() {\n    const history = useHistory()\n\n    const handleClick = useCallback(() => {\n        history.push(`/${RouteLink.Index}`)\n    }, [])\n\n    return (\n        <div>\n            404\n            <Button type='primary' onClick={handleClick}>\n                Back Home\n            </Button>\n        </div>\n    )\n})\n","import path from 'path'\nimport Dotenv from 'dotenv'\n\nimport log from './log'\nimport { EnvValueType, JSValueType } from './utils.d'\n\nexport const CONVERT_TYPE_MAP: Record<\n    JSValueType,\n    (value: string) => EnvValueType<JSValueType>\n> = {\n    string: (value) => value,\n    number: (value) => Number(value),\n    boolean: (value) => value.toLowerCase() === 'true',\n    null: () => null,\n    undefined: () => undefined,\n    bigInt: (value) => BigInt(value),\n    symbol: (value) => Symbol(value),\n    object: (value) => {\n        try {\n            return JSON.parse(value)\n        } catch (error) {\n            log.group('JSON.parse 失败', {\n                sub: [\n                    { type: 'error', message: error },\n                    {\n                        type: 'log',\n                        message: `要解析的值为: ${\n                            value === '' ? '空字符串' : value\n                        }`,\n                    },\n                ],\n            })\n            return null\n        }\n    },\n    array: (value) => {\n        try {\n            return JSON.parse(value)\n        } catch (error) {\n            log.group('JSON.parse 失败', {\n                sub: [\n                    { type: 'error', message: error },\n                    {\n                        type: 'log',\n                        message: `要解析的值为: ${\n                            value === '' ? '空字符串' : value\n                        }`,\n                    },\n                ],\n            })\n\n            return null\n        }\n    },\n    function: (value) => eval(`(${value})`),\n}\n\n// 这里的目的是因为: constants 存在打包之前就需要的 process.env 中的变量\n// 所以需要在这里提前注入环境变量\nconst currentWorkingDir = process.cwd()\nDotenv.config({ path: path.join(currentWorkingDir, '.env') })\n\n/** 以下不需要导出，用在此文件 */\n\nenum ENV_KEY {\n    SCROLL_SPEED = 'SCROLL_SPEED',\n    ARTICLE_DIR = 'ARTICLE_DIR',\n    WRITE_ARTICLE_DIR = 'WRITE_ARTICLE_DIR',\n    ARTICLE_PICtURE = 'ARTICLE_PICtURE',\n    ARTICLE_SUFFIX_NAME = 'ARTICLE_SUFFIX_NAME',\n}\n\nconst getEnvValue = <ReturnType extends JSValueType = 'string'>(\n    envKey: ENV_KEY,\n    options?: {\n        returnType?: ReturnType\n    },\n): EnvValueType<ReturnType> => {\n    if (envKey === undefined || envKey === null) {\n        return null as EnvValueType<ReturnType>\n    }\n\n    const { returnType = 'string' } = options ?? {}\n\n    const converter = CONVERT_TYPE_MAP[returnType]\n\n    if (!converter) {\n        throw new Error('类型不存在')\n    }\n\n    return converter(process.env[envKey] ?? '') as EnvValueType<ReturnType>\n}\n\n/** 以上不需要导出，用在此文件 */\n\nexport enum RouteName {\n    Index = '首页',\n    Type = '分类',\n    Mood = '心情',\n    About = '关于',\n}\n\nexport enum RouteLink {\n    Index = 'index',\n    Type = 'type',\n    Mood = 'mood',\n    About = 'about',\n}\n\nexport enum LOCAL_STORAGE_NAME {\n    SELECTED_ARTICLE_KEY = 'selectedArticleKey',\n    ARTICLE_FILE_PATH = 'activeFilePath',\n    ARTICLE_TREE_EXPANDED_KEYS = 'articleTreeExpandedKeys',\n    DATA_THEME = 'data-theme',\n    GPT3_CHAT_INFORMATION = 'gpt3_chat_information',\n}\n\n// 所有自定义事件名\nexport enum EVENT_EMITTER_NAME {\n    // 只有当视区内只显示文章时，此事件才会被监听和触发。\n    OPEN_ARTICLE_DIRECTORY = 'openArticleDirectoryOnlyArticle',\n    SHOW_HEADER_X = 'showHeaderX',\n}\n\n/************************* 以下都是 .env 中的变量值 *************************/\n\nexport const SCROLL_SPEED = getEnvValue(ENV_KEY.SCROLL_SPEED, {\n    returnType: 'number',\n})\n\n/** 以下变量即用于打包之前, 也用于打包后的运行时 */\n\nexport const ARTICLE_SUFFIX_NAME = getEnvValue(ENV_KEY.ARTICLE_SUFFIX_NAME)\n\n/** 以上变量即用于打包之前, 也用于打包后的运行时 */\n\n/** 以下变量用于打包之前的准备 */\n\nexport const ARTICLE_DIR = getEnvValue(ENV_KEY.ARTICLE_DIR)\n\nexport const ARTICLE_PICtURE = getEnvValue(ENV_KEY.ARTICLE_PICtURE)\n\nexport const WRITE_ARTICLE_DIR = getEnvValue(ENV_KEY.WRITE_ARTICLE_DIR)\n\n/** 以上变量用于打包之前的准备 */\n\n/************************* 以上都是 .env 中的变量值 *************************/\n","const LOG_COLOR_MAP = {\n    error: 'color: #fff; background-color: #f00',\n    info: 'color: #fff; background-color: #00f',\n    logo: 'color: #fff; background-color: #000',\n    trace: 'color: #000; background-color: #fff',\n}\n\nconst logoGroup = (\n    title: string,\n    options: {\n        sub: {\n            type: 'error' | 'info' | 'log' | 'trace'\n            message: string | Error | unknown\n        }[]\n    },\n) => {\n    const { sub = [] } = options ?? {}\n\n    console.group(`%c${title}`, 'color: #fff; background-color: #000')\n\n    sub.forEach((item) => {\n        const { type, message } = item\n\n        console[type](`%c${message}`, LOG_COLOR_MAP[type])\n    })\n\n    console.groupEnd()\n}\n\nexport default {\n    ...console,\n    group: logoGroup,\n}\n"],"sourceRoot":""}