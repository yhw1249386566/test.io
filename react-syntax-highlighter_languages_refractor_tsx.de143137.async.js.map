{"version":3,"sources":["webpack:///./node_modules/refractor/lang/tsx.js","webpack:///./node_modules/refractor/lang/typescript.js"],"names":["refractorJsx","refractorTypescript","tsx","Prism","register","typescript","util","clone","languages","extend","tag","pattern","RegExp","source","flags","lookbehind","module","exports","displayName","aliases","greedy","inside","builtin","keyword","push","typeInside","insertBefore","decorator","at","alias","function","generic","ts"],"mappings":"sGACA,IAAIA,EAAe,EAAQ,OACvBC,EAAsB,EAAQ,MAIlC,SAASC,EAAIC,GACXA,EAAMC,SAASJ,GACfG,EAAMC,SAASH,GACd,SAAWE,GACV,IAAIE,EAAaF,EAAMG,KAAKC,MAAMJ,EAAMK,UAAUH,YAClDF,EAAMK,UAAUN,IAAMC,EAAMK,UAAUC,OAAO,MAAOJ,UAC7CF,EAAMK,UAAUN,IAAI,oBACpBC,EAAMK,UAAUN,IAAI,oBAG3B,IAAIQ,EAAMP,EAAMK,UAAUN,IAAIQ,IAC9BA,EAAIC,QAAUC,OACZ,qBAAqBC,OAAS,MAAQH,EAAIC,QAAQE,OAAS,IAC3DH,EAAIC,QAAQG,OAEdJ,EAAIK,YAAa,CAClB,CAbA,CAaEZ,EACL,CApBAa,EAAOC,QAAUf,EACjBA,EAAIgB,YAAc,MAClBhB,EAAIiB,QAAU,E,gCCAd,SAASd,EAAWF,IACjB,SAAWA,GACVA,EAAMK,UAAUH,WAAaF,EAAMK,UAAUC,OAAO,aAAc,CAChE,aAAc,CACZE,QACE,+KACFI,YAAY,EACZK,QAAQ,EACRC,OAAQ,MAEVC,QACE,0FAEJnB,EAAMK,UAAUH,WAAWkB,QAAQC,KACjC,qDACA,2FACA,qCAEKrB,EAAMK,UAAUH,WAAW,oBAC3BF,EAAMK,UAAUH,WAAW,oBAClC,IAAIoB,EAAatB,EAAMK,UAAUC,OAAO,aAAc,CAAC,UAChDgB,EAAW,cAClBtB,EAAMK,UAAUH,WAAW,cAAcgB,OAASI,EAClDtB,EAAMK,UAAUkB,aAAa,aAAc,WAAY,CACrDC,UAAW,CACThB,QAAS,qBACTU,OAAQ,CACNO,GAAI,CACFjB,QAAS,KACTkB,MAAO,YAETC,SAAU,aAGd,mBAAoB,CAElBnB,QACE,yGACFS,QAAQ,EACRC,OAAQ,CACNS,SAAU,4DACVC,QAAS,CACPpB,QAAS,WAETkB,MAAO,aACPR,OAAQI,OAKhBtB,EAAMK,UAAUwB,GAAK7B,EAAMK,UAAUH,UACtC,EAlDA,CAkDEF,EACL,CAvDAa,EAAOC,QAAUZ,EACjBA,EAAWa,YAAc,aACzBb,EAAWc,QAAU,CAAC,K","file":"react-syntax-highlighter_languages_refractor_tsx.de143137.async.js","sourcesContent":["'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx['parameter']\n    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n"],"sourceRoot":""}