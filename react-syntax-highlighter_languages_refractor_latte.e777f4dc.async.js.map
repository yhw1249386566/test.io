{"version":3,"sources":["webpack:///./node_modules/refractor/lang/latte.js","webpack:///./node_modules/refractor/lang/markup-templating.js","webpack:///./node_modules/refractor/lang/php.js"],"names":["refractorMarkupTemplating","refractorPhp","latte","Prism","register","languages","comment","pattern","lookbehind","alias","delimiter","php","inside","markupLatte","extend","insertBefore","punctuation","tag","hooks","add","env","language","lattePattern","buildPlaceholders","grammar","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","constant","greedy","number","operator","variable","package","keyword","function","property","string_interpolation","string","interpolation","attribute","test","phpPattern"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_latte.e777f4dc.async.js","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nvar refractorPhp = require('./php.js')\nmodule.exports = latte\nlatte.displayName = 'latte'\nlatte.aliases = []\nfunction latte(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  Prism.register(refractorPhp)\n  ;(function (Prism) {\n    Prism.languages.latte = {\n      comment: /^\\{\\*[\\s\\S]*/,\n      'latte-tag': {\n        // https://latte.nette.org/en/tags\n        pattern: /(^\\{(?:\\/(?=[a-z]))?)(?:[=_]|[a-z]\\w*\\b(?!\\())/i,\n        lookbehind: true,\n        alias: 'important'\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        alias: 'punctuation'\n      },\n      php: {\n        pattern: /\\S(?:[\\s\\S]*\\S)?/,\n        alias: 'language-php',\n        inside: Prism.languages.php\n      }\n    }\n    var markupLatte = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        'n-attr': {\n          pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n          inside: {\n            'attr-name': {\n              pattern: /^[^\\s=]+/,\n              alias: 'important'\n            },\n            'attr-value': {\n              pattern: /=[\\s\\S]+/,\n              inside: {\n                punctuation: [\n                  /^=/,\n                  {\n                    pattern: /^(\\s*)[\"']|[\"']$/,\n                    lookbehind: true\n                  }\n                ],\n                php: {\n                  pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                  inside: Prism.languages.php\n                }\n              }\n            }\n          }\n        }\n      },\n      markupLatte.tag\n    )\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (env.language !== 'latte') {\n        return\n      }\n      var lattePattern =\n        /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\}/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'latte',\n        lattePattern\n      )\n      env.grammar = markupLatte\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      {\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n        greedy: true,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n        greedy: true,\n        lookbehind: true\n      },\n      /\\b(?:null)\\b/i,\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ]\n    var number =\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator =\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern:\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          // yield from\n          pattern: /(\\byield\\s+)from\\b/i,\n          lookbehind: true\n        }, // `class` is always a keyword unlike other keywords\n        /\\bclass\\b/i,\n        {\n          // https://www.php.net/manual/en/reserved.keywords.php\n          //\n          // keywords cannot be preceded by \"->\"\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n          pattern:\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n          lookbehind: true\n        }\n      ],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern:\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern:\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern:\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern =\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}