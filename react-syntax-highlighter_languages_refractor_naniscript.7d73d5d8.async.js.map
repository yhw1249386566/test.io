{"version":3,"sources":["webpack:///./node_modules/refractor/lang/naniscript.js"],"names":["naniscript","Prism","expressionDef","params","pattern","alias","lookbehind","greedy","isBracketsBalanced","input","brackets","stack","i","length","bracket","bracketsIndex","indexOf","push","pop","getTextContent","token","Array","isArray","map","join","content","languages","comment","define","inside","value","key","label","command","expression","nani","hooks","add","env","tokens","forEach","type","module","exports","displayName","aliases"],"mappings":"6FAKA,SAASA,EAAWC,IACjB,SAAWA,GACV,IAAIC,EAAgB,qBAChBC,EAAS,CACX,gBAAiB,CACfC,QAAS,oBACTC,MAAO,YAET,mBAAoB,CAClBD,QAAS,WACTE,YAAY,EACZD,MAAO,YAET,sBAAuB,CACrB,CACED,QAASF,EACTG,MAAO,YAET,CACED,QAAS,aACTE,YAAY,EACZC,QAAQ,EACRF,MAAO,YAET,CACED,QAAS,cACTC,MAAO,cA2Gb,SAASG,EAAmBC,GAG1B,IAFA,IAAIC,EAAW,OACXC,EAAQ,GACHC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,CACrC,IAAIE,EAAUL,EAAMG,GAChBG,EAAgBL,EAASM,QAAQF,GACrC,IAAuB,IAAnBC,EACF,GAAIA,EAAgB,IAAM,EACxBJ,EAAMM,KAAKF,EAAgB,QACtB,GAAIJ,EAAMO,QAAUH,EACzB,OAAO,CAGb,CACA,OAAwB,IAAjBJ,EAAME,MACf,CAKA,SAASM,EAAeC,GACtB,MAAqB,kBAAVA,EACFA,EACEC,MAAMC,QAAQF,GAChBA,EAAMG,IAAIJ,GAAgBK,KAAK,IAE/BL,EAAeC,EAAMK,QAEhC,CAnIAxB,EAAMyB,UAAU1B,WAAa,CAE3B2B,QAAS,CACPvB,QAAS,gBACTE,YAAY,GAIdsB,OAAQ,CACNxB,QAAS,QACTC,MAAO,MACPwB,OAAQ,CACNC,MAAO,CACL1B,QAAS,gCACTE,YAAY,EACZD,MAAO,YAET0B,IAAK,CACH3B,QAAS,UACTE,YAAY,KAKlB0B,MAAO,CACL5B,QAAS,8BACTE,YAAY,EACZD,MAAO,SAET4B,QAAS,CACP7B,QAAS,8BACTE,YAAY,EACZD,MAAO,WACPwB,OAAQ,CACN,eAAgB,QAChBK,WAAY,CACV9B,QAASF,EACTK,QAAQ,EACRF,MAAO,YAET,iBAAkB,CAChBD,QAAS,eACTyB,OAAQ1B,KAKd,eAAgB,CACdC,QAAS,wBACTE,YAAY,EACZD,MAAO,cACPwB,OAAQ,CAEN,eAAgB,cAChBK,WAAY,CACV9B,QAASF,EACTK,QAAQ,EACRF,MAAO,YAET,iBAAkB,CAChBD,QAAS,2BACTG,QAAQ,EACRF,MAAO,WACPwB,OAAQ,CACN,iBAAkB,CAChBzB,QAAS,iCACTE,YAAY,EACZuB,OAAQ1B,GAEV,qBAAsB,CACpBC,QAAS,iBACTE,YAAY,EACZD,MAAO,QAET,kBAAmB,cAM7BJ,EAAMyB,UAAUS,KAAOlC,EAAMyB,UAAU,cAMvCzB,EAAMmC,MAAMC,IAAI,kBAAkB,SAAUC,GAE1C,IAAIC,EAASD,EAAIC,OACjBA,EAAOC,SAAQ,SAAUpB,GACvB,GAAqB,kBAAVA,GAAqC,iBAAfA,EAAMqB,KAAyB,CAC9D,IAAIhB,EAAUN,EAAeC,GACxBZ,EAAmBiB,KACtBL,EAAMqB,KAAO,WACbrB,EAAMK,QAAUA,EAEpB,CACF,GACF,GAkCD,EAjKA,CAiKExB,EACL,CAtKAyC,EAAOC,QAAU3C,EACjBA,EAAW4C,YAAc,aACzB5C,EAAW6C,QAAU,E","file":"react-syntax-highlighter_languages_refractor_naniscript.7d73d5d8.async.js","sourcesContent":["'use strict'\n\nmodule.exports = naniscript\nnaniscript.displayName = 'naniscript'\nnaniscript.aliases = []\nfunction naniscript(Prism) {\n  ;(function (Prism) {\n    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/\n    var params = {\n      'quoted-string': {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        alias: 'operator'\n      },\n      'command-param-id': {\n        pattern: /(\\s)\\w+:/,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'command-param-value': [\n        {\n          pattern: expressionDef,\n          alias: 'selector'\n        },\n        {\n          pattern: /([\\t ])\\S+/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'operator'\n        },\n        {\n          pattern: /\\S(?:.*\\S)?/,\n          alias: 'operator'\n        }\n      ]\n    }\n    Prism.languages.naniscript = {\n      // ; ...\n      comment: {\n        pattern: /^([\\t ]*);.*/m,\n        lookbehind: true\n      },\n      // > ...\n      // Define is a control line starting with '>' followed by a word, a space and a text.\n      define: {\n        pattern: /^>.+/m,\n        alias: 'tag',\n        inside: {\n          value: {\n            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          key: {\n            pattern: /(^>)\\w+/,\n            lookbehind: true\n          }\n        }\n      },\n      // # ...\n      label: {\n        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n        lookbehind: true,\n        alias: 'regex'\n      },\n      command: {\n        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          'command-name': /^@\\w+/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'command-params': {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            inside: params\n          }\n        }\n      },\n      // Generic is any line that doesn't start with operators: ;>#@\n      'generic-text': {\n        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n        lookbehind: true,\n        alias: 'punctuation',\n        inside: {\n          // \\{ ... \\} ... \\[ ... \\] ... \\\"\n          'escaped-char': /\\\\[{}\\[\\]\"]/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'inline-command': {\n            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n            greedy: true,\n            alias: 'function',\n            inside: {\n              'command-params': {\n                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n                lookbehind: true,\n                inside: params\n              },\n              'command-param-name': {\n                pattern: /^(\\[[\\t ]*)\\w+/,\n                lookbehind: true,\n                alias: 'name'\n              },\n              'start-stop-char': /[\\[\\]]/\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.nani = Prism.languages['naniscript']\n    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\n    /**\n     * This hook is used to validate generic-text tokens for balanced brackets.\n     * Mark token as bad-line when contains not balanced brackets: {},[]\n     */\n    Prism.hooks.add('after-tokenize', function (env) {\n      /** @type {(Token | string)[]} */\n      var tokens = env.tokens\n      tokens.forEach(function (token) {\n        if (typeof token !== 'string' && token.type === 'generic-text') {\n          var content = getTextContent(token)\n          if (!isBracketsBalanced(content)) {\n            token.type = 'bad-line'\n            token.content = content\n          }\n        }\n      })\n    })\n    /**\n     * @param {string} input\n     * @returns {boolean}\n     */\n    function isBracketsBalanced(input) {\n      var brackets = '[]{}'\n      var stack = []\n      for (var i = 0; i < input.length; i++) {\n        var bracket = input[i]\n        var bracketsIndex = brackets.indexOf(bracket)\n        if (bracketsIndex !== -1) {\n          if (bracketsIndex % 2 === 0) {\n            stack.push(bracketsIndex + 1)\n          } else if (stack.pop() !== bracketsIndex) {\n            return false\n          }\n        }\n      }\n      return stack.length === 0\n    }\n    /**\n     * @param {string | Token | (string | Token)[]} token\n     * @returns {string}\n     */\n    function getTextContent(token) {\n      if (typeof token === 'string') {\n        return token\n      } else if (Array.isArray(token)) {\n        return token.map(getTextContent).join('')\n      } else {\n        return getTextContent(token.content)\n      }\n    }\n  })(Prism)\n}\n"],"sourceRoot":""}